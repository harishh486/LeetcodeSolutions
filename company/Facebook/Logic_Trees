Binary Tree max path Sum
========================
// which takes a node as an argument and computes a maximum contribution that this node and one/zero of its subtrees could add.
    //In other words, it's a maximum gain one could have including the node (and maybe one of its subtrees) into the path
    int pathSum(TreeNode root){
        if(root == null)
            return 0;
        // traverse left and right recursively, if we find negative we ll return 0 
        //The important thing is "We can only get any sort of gain IF our branches are not below zero. If they are below zero, why do we even bother considering them? Just pick 0 in that case. Therefore, we do max(<some gain we might get or not>, 0).
        int left = Math.max(0, pathSum(root.left));
         int right = Math.max(0, pathSum(root.right));
        //update max path sum if its greater than existing max path sum
        max_path_sum = Math.max(max_path_sum, left+right+root.val);
        
        return Math.max(left, right) + root.val;
    }

clone a graph
=================

1. Since graph problems--u might use dfs/bfs -first glance
2. Clone-deep copy--mostly solved using HahTable or map - since u need to a to store relation bet old and new 

use dfs
2 cases:



We would take a hash map to store the reference of the copy of all the nodes that have already been visited and cloned. 
The key for the hash map would be the node of the original graph and corresponding value would be the corresponding cloned node of the cloned graph. 
If the node already exists in the visited we return corresponding stored reference of the cloned node.

1. if node is already present in map- return the node(cloned)
2: if not present, 
     a) create one cloned node
     b) nd put in the map for future reference--consider it as -visited array or something so that we dont ctreate again
     c) now we need to add neighbor relation to created node using (neigbors of old node in a recursive fashion)
        clone.neighbours.add(clone(neighbor))


Binary Path:
============

//Approach
// 1. path --immediate trike--dfs/bfs
// 2. whole paths--may be dfs
// 3. dfs template with iniyial path "" ====> dfs(root,"");

// 4. Base condition -- if leaf nodes then we add the cuureent path built till now and add to result
// 5. otherwise we ll add the everynode we encounter to current path till we reach leaf nodes



   private void dfs(TreeNode node, String currentPath){
        currentPath += node.val; // we ll add everynode in the path that we traverse
        
        if(node.left == null && node.right == null){
            // once we reach to leaf node then add the current path we built till now
            result.add(currentPath);
            return;
        }
        //if not , recurse left and right
         if(node.left != null)
           dfs(node.left, currentPath + "->"); //
         if(node.right != null)
           dfs(node.right, currentPath + "->"); //
    }


alien dictionary:
==================

Same p[roblem as course schedule--dependecy thinng]
1. Build a graph from all words initially
2. use topological dfs()

1. Buildgraph
----    // build a dependency graph using adjlist and also update the indegree array
     // // initialise the adj list graph with all charac ters in all words
     / once u fill with init,  then u eatblish relationships
     loop thru all words
     // now compare each char in thos words
     // a->b here out=a, in=b
       char out = first.charAt(j);
                    char in = second.charAt(j);
                    // a->b , so in adj list. we need to insert the valiue if not present
                    // if the graph does not contains dependecny, which is in set, u add it else u dont add// since hashset, we can check usinhg contains i guess
                    //also increase the indegree if u find the dependency
                     // once it is found , u can break out th e loop
2. toplogicaldfs()
            // we ll use stringbuilder to update the characters instead of string
        // we ll insert all elements into queue who has indegree==0 initially, which means they dont have any dependency so they can come at any time//
        // so insert all indgree==0 into queu and do a stanmdard queue template
        / loop thru all keys in graph and check the indegree of that character in indegree if its has zero , if so then  add to queue initially
        // initial push to queue
         so u need to add all orphan nodes to sb , since it contains results

         // now we need to find nodes which has dependency, take it out and reduce the indegree and check if indegreeis zero then add tio queue
        
        // stand ard queue template

        if(adjList.get(curr) == null || adjList.get(curr).size()==0 ){
                // we shud not do antthing, and pick the next nodes in the queue
                continue;
            }
           // if we have some elements in the adj list which means we have a dependency
            // So what do we do here:??
            // i think we can take it and reduce the indgree ??
           //   Since we are. removing this particular current element, so we need to reduce all its neighbour indegree becios we removed aos we need to update the indegree of all its neiughbours

              //also check if it becomes zero after update we need to push to queu and sb
                if(indegree[neighbour-'a'] == 0){
                    //add to q and sb
                    q.offer(neighbour);
                    sb.append(neighbour);
                    
                }


        // once we are out of queue, which means we processed all nodes
        // if total chars is sb length, which means we got all chars /nodes so we can return else ""
        return sb.length() == totalChars ? sb.toString() : "";


BST To Sorted DLL
================

Summary:

Perform Inorder with chnage in process step:

Everythhing inplace-- space for recursive calls
1.u need to have a Prev node and also some head reference as well 
becos prev keeps on chnaging

prev  = new Node(0, null, null);
 Node head = prev;
                                             P  Root
2. call convert  // draw a diagram of dll 1->2-3
   -- inorder
      main step

      if(root == null)
      return; // base for recursion
       //Inorder style
       //1. left
       convert(root.left);
       //2. Process
         prev.right = root;
         root.left= prev;
         prev = root;
       //3. right
       convert(root.right);
3. once converted 
   rearrange last and first pointers,

   At this point ,prev points to last node 
   head is a dummy node so 
   and we ll return head.right
   
   prev.right = head.right;
   head.right.left = prev;
   return head.right;
