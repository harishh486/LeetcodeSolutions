Binary Tree max path Sum
========================
// which takes a node as an argument and computes a maximum contribution that this node and one/zero of its subtrees could add.
    //In other words, it's a maximum gain one could have including the node (and maybe one of its subtrees) into the path
    int pathSum(TreeNode root){
        if(root == null)
            return 0;
        // traverse left and right recursively, if we find negative we ll return 0 
        //The important thing is "We can only get any sort of gain IF our branches are not below zero. If they are below zero, why do we even bother considering them? Just pick 0 in that case. Therefore, we do max(<some gain we might get or not>, 0).
        int left = Math.max(0, pathSum(root.left));
         int right = Math.max(0, pathSum(root.right));
        //update max path sum if its greater than existing max path sum
        max_path_sum = Math.max(max_path_sum, left+right+root.val);
        
        return Math.max(left, right) + root.val;
    }

clone a graph
=================

1. Since graph problems--u might use dfs/bfs -first glance
2. Clone-deep copy--mostly solved using HahTable or map - since u need to a to store relation bet old and new 

use dfs
2 cases:



We would take a hash map to store the reference of the copy of all the nodes that have already been visited and cloned. 
The key for the hash map would be the node of the original graph and corresponding value would be the corresponding cloned node of the cloned graph. 
If the node already exists in the visited we return corresponding stored reference of the cloned node.

1. if node is already present in map- return the node(cloned)
2: if not present, 
     a) create one cloned node
     b) nd put in the map for future reference--consider it as -visited array or something so that we dont ctreate again
     c) now we need to add neighbor relation to created node using (neigbors of old node in a recursive fashion)
        clone.neighbours.add(clone(neighbor))


Binary Path:
============

//Approach
// 1. path --immediate trike--dfs/bfs
// 2. whole paths--may be dfs
// 3. dfs template with iniyial path "" ====> dfs(root,"");

// 4. Base condition -- if leaf nodes then we add the cuureent path built till now and add to result
// 5. otherwise we ll add the everynode we encounter to current path till we reach leaf nodes



   private void dfs(TreeNode node, String currentPath){
        currentPath += node.val; // we ll add everynode in the path that we traverse
        
        if(node.left == null && node.right == null){
            // once we reach to leaf node then add the current path we built till now
            result.add(currentPath);
            return;
        }
        //if not , recurse left and right
         if(node.left != null)
           dfs(node.left, currentPath + "->"); //
         if(node.right != null)
           dfs(node.right, currentPath + "->"); //
    }