1. letterCombination of phone numbers:
===================
// combination -- tells permutation
// heavy recursion
//helper function standard template

Within recursive:
 // base case
 // "23" --> index 0 and index 1, 
 // when we reach the index , we already had a combination of two letters so we can directly add them
        
  if(index == digits.length()){
            result.add(combination);
            return ;
        }

    // Parse the string "23" to actual digits and then get actual letters of that digits 2 and 3;
    // iterate upto digit length
    // traverse heavy recursive method till how many numbers
    // get the actual letter and iterate ovetr th lengthy of that letter
        
    // here lets say we got "abc"
    // then we add the first letter of letters into existing combination and increase the index to go to next pressed number.
    // take 'a' - call other numbers "3"--return def
    // now recursive call again

       char[] pressedNumbers = digits.toCharArray();
      
        String letters  = mapping[pressedNumbers[index]- '0'];
        //a- ad-ae-af, b-bd-bf-be;;;etc
        for(int i =0; i< letters.length();i++){
            letterCombinationsRecursive(mapping, result, digits, combination + letters.charAt(i) ,index+1 );   
        }


2: Generate Parenthesis:
=======================

Brute for ce --2^n psossibilities and select the valid oones

Backtrack--dfs
  1: our choic-- ( or)--insert
  2. our constraint: 
     only insert back) if we already  have open and
     also  we can isert open upto n-limit
  3. our goal--gerete all possibilities of length n*2

tree diagram--helps

Standard template:


recursive: dfs

   // base case:: current string shud be of full length then stop becos we need full length things
        if(combination.length() == max*2){
            result.add(combination);
            return;
        }
  // recursive call and operations if any
        // we ll try to increase "(" whenever possible like  no of open ( is still less than max n=3, we ll recurse
        if(open < max)
            helperRecursive(result, max, combination+ "(", open+1,close);
        if(close< open)
            helperRecursive(result, max, combination+ ")", open,close+1);
        
    }


    3: Word search:
====================
traditionalp back track template 
with matriz

Recursion plus Matrrix --dfs templte:

  for(int i =0; i<board.length;i++ ){
            for(int j=0;j<board[0].length; j++){
                if(board[i][j] == word.charAt(0) && dfs(board, word, 0,i, j))
                    return true;
            }
        }

// dfs part:
1. base case :: count  the characters
2/ boundaries --return false
3. take the original char
   do dfs
   retain old 
   backtracking technique


 dfs(char[][] board, String word, int count, int i, int j){
        // base condition
        //we will increent count for every recursive call
        if(count == word.length()){
            return true;
        }
        
        if(i<0 || j<0 ||i >= board.length || j >= board[0].length || board[i][j] != word.charAt(count))
            return false;
        
        char temp=board[i][j]; //restore original 
        //chnage to something becos of avoiding visiting again 
        board[i][j] = ' ';
        boolean found = dfs(board, word, count+1,i+1, j) || dfs(board, word, count+1,i-1, j) || dfs(board, word, count+1,i, j+1) || dfs(board, word, count+1,i, j-1) ;
        board[i][j] = temp;
        return found;
        
    }


word search:2
===============

// iterate over the ,matriz 
// each letter and check with trie whether that letter is present in the trie or not
// if so then control comes to second char in that node trie , now matrrix do dfs and search
//  if any sorrounding  element is  a char  item that is present in the  next node of the trie
//  if so repeat


// Back Track technique:

// Make chnage
// reucrsive

// and undo the chnages


    // word search problem
        // Seeing this would definitely bfs/dfs
        // matrix pattern
        
        //Many words:: take each word and try. to search in the matriz juts like word search
        //But the time complexity would be very high
        
        // We can leverage Trie data structure
           // -- prune. the back tracking.
           //     we ll try to. iterate whole matrix and if that board[i][j] char is  
           //         found in Trienode '0' which is a children for root, then we ll keep searching
           //             if we have whole word in matrrix 
           //                 --back tracking with trie --pruning

 

        