
1.LRU cache
===============

 Summary:
 - craete a DLL node which has key and value
- eviction policy --LRU
- Access from front or add to front  :::: remove from back end
DS:
- req:
get()
put()
Time o(!)
 get and put item in constant time

 fast lookups --  Hashmaps (hashtable) but cannot 
 fast remove/puts -- if we have access to current node , i can remove the node in constant timme
 since single LL takes o(n) to search for previou node so use DLL for fast removal
 array is not good --since we need shiftig 

 So dll backed by hashmap

 so hash table put and get

 add - add  the nodes in dll at front
    Node head_next = head.next;
    //first use right connections and left later
    node.next = head_next;
    head_next.prev = node;

    head.next = node;
    node.prev = head;

 remove --removes the node in dll at the end

    //1-2-3 passed 2
    // simple easy if u draw a diagram
        Node next_node = node.next;
        Node prev_node = node.prev;
        prev_node.next = next_node;
        next_node.prev = prev_node;

- 

get - get the value node HashMap<Integer, Node> node_map;
     -- get the node first then pick  the value from this node and return
     -- since we accessed , remove from current position and add to front
     Node node = node_map.get(key);
     if(node  != null){
         result = node.val;
         remove(node);
         add(node);
         //remove and node means --move to front since we used
         
     }
     return result;

put -- put the key and node and value to hashmap

1. if present then overwrites
     // get the node and update the value and do shuffle positions remove and add
       Node node = node_map.get(key);
       if(node != null){
           remove(node);
           //updte the value
           node.val = value;
           add(node);
       }
2. if not present, then check capacity , 
      if capacity is full evict/remove from  hashmap and dll 
            if(node_map.size() == capacity){
              //remove from tail
              //remove from hashmap and linked list as well;
              node_map.remove(tail.prev.key);
              remove(tail.prev)
    else if we have capacity then add to hashmap and dll
        Node new_node = new Node();
        new_node.key = key;
        new_node.val = value;
        
        // then u put in map
        node_map.put(key, new_node);
        //add to list
        add(new_node);


2: minstack
=============

1. use 2 stacks approacj
use stack for general opertions

push()
 -- push to stack regular stack regardless
 --push to mminstack only if value is min than whatever it is in minstack, but initailly when stack is empty we push init value
  so push to 2 stacks if its min else only on main stack

Pop()
 --- the element that we are poping is a min value then u need to pop from  both stacks

2. uisng single stack:
   ordering will be gone if u want to print
   -- push()
      whenu push u generally push an element
       but if its min than current min, then first u push min , update min and oush the new min
   --pop()
      if element is min that we are poping  u geerally pop and also update the next min using next pop
      --- 2 opo operations
      
