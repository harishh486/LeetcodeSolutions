Mergeintervals:
=============


/ now we need to soet the intervals becos it did not gave them it is sorted
        // need a custom object comparator to sort based on first element of array
        //[[1,3],[2,6],[8,10],[15,18]]

        / create a list of arrays since u dont know the arr elements which might have merged so list is good option

        // we ll add th initial value and then update the secon element of array after adding
         //now weh ahve first element in list
        // [[1,3]]
        // logic is compare the second element of first array with first element of second array
        // [[1,3],[2,6]]

conversion from list of arrays to arr if arrays matriz

        ***--> output_list.toArray(new int[output_list.size()][])
        Arrays.sort(intervals, (arr1, arr2) -> Integer.compare(arr1[0],arr2[0]));

        use compare (a,b) not a-b


meeting room2 :

/ Instead of manually iterating on every room that's been allocated and checking if the room is available or not, 
//we can keep all the rooms in a min heap where the key for the min heap would be the ending time of meeting.

// So, every time we want to check if any room is free or not, simply check the topmost element of the min heap as that 
//would be the room that would get free the earliest out of all the other rooms currently occupied


//sort and then


 PriorityQueue<Integer> minHeap = new PriorityQueue();

        for(int[] arr : intervals ){
            
            // check min heap emptyness else null ptr exception
            // if the next meeting does not coincides then there is no need of extra room
            // u can use same room
            if(!minHeap.isEmpty() && minHeap.peek() <=arr[0])
                minHeap.poll();
            
            // we ll just add the arr lemnts which are coinciding
            minHeap.offer(arr[1]);
            
            
            
        }
        
        return minHeap.size();


top k freqeunt lements:
========================

1. build frq mapp
2. Then go thru the maps keys and build a priority queue and order of pq shud be on freq  count of map items
3. then since iit is max heap, we can take top k elements in the heap


      int[] result = new int[k];
        HashMap<Integer, Integer> map = new HashMap();
        //iterate and put 
        
        for(int i: nums){
            map.put(i, map.getOrDefault(i,0)  + 1);
        }
        
        //maxHeap should be ordered in such a way that based on the frequency count it shud be there, so that top 3 will be top k elements
        
        PriorityQueue<Integer> maxHeap = new PriorityQueue((a, b) -> map.get(b) - map.get(a));
        // now go thru the key elements of the map and push to the queue then we ll get the top k elements by polling upto K
        for(int x : map.keySet()){
            // now push all k, and it will be inserted based on the count frequency of the elements
            maxHeap.offer(x);
            //  if(maxHeap.size() >k){
            //     maxHeap.poll();
            // }
        }
        
        // once filled with max heap all key elements
        for(int j=0 ; j<k;j++){
            result[j] = maxHeap.poll(); 
        }
        return result;



        heap
        cretae -o(k)
        replace -logk
        printall -- o(k )