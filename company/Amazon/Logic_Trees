1. Validate BST
=============

Binary search Tree -- every root should shud be greater than its left subtree and 
less than its right sub tree

logic every node, shud be in between min and max;
min < node.val < max
recursieve obviously


validatehelper(root, min, max) -- make sure it is long in leetcode

check base cases
root==null return true
if root <=min || >= max
  out of range  return false
return validate(root.left, min, root.val) &&
       validate(root.left, root.val, max) 

Note:
======

  public static boolean isValidBST(TreeNode root) {
        return validateHelper(root, Long.MIN_VALUE, Long.MAX_VALUE);
          
    }
private static boolean validateHelper(TreeNode root, long min, long max){
}

######Try to write static methoda and helper private methods
static needs to call the statiic methods

Typically when writing trrees-- recursively


2. Symmetric trees=
==============

Two trees are a mirror reflection of each other if:

Their two roots have the same value.
The right subtree of each tree is a mirror reflection of the left subtree of the other tree.

This is like a person looking at a mirror. The reflection in the mirror has the same head, but the reflection's right arm corresponds to the actual person's left arm, and vice versa.

//check the root cases
1.helper method(left, right)// check left sub tree and right sub tree are Symmetric
2.if both are null
 return false;
 if one of them is null other is not null -==> if left ==null || right == null --return false;
   return false

3. check the data as well
    if(left.val != null )  return false;

4. symmtric(left.left, right.right) && symetric(left.right, right.left)
Diagram

Iterative approach
==================
        // we will pick 2 element nodes and try to compare them and everytime it shud be equal else not symmetric
        // we also need to insert in certain way to be symmetric
        // we will initiaize 2 nodes initially as roots only
        // then later on left sub tree an d right sub tree
         
          q.add(root);
            q.add(root);

            // do the oprations until queu is empty
            write all conditions
            if(t1 == null && t2 == null)
                     continue; // important becos there might be next elemnts after two consecutuve nulls ---*******


                if(t1 == null || t2 == null )
                    return false;

                if(t1.val !=  t2.val)
                    return false;

                      // now we completed all comparisons
                // we need to insert in a better way to check symm

                q.add(t1.left);
                q.add(t2.right);
                q.add(t1.right);
                q.add(t2.left);

  3: Level order traversal:
  =======================

comes to mind BFS breadth first search
 trees are acuyclic graph representation:

we can use queue and make use of FIFO since BFS uses ques where as DFS --stack

// initailize the queue : use Linked list implementation of Queue Interface
Queue <TreeNode> q = new LinkedList();
// initilize with root node initilly to queus as iniyial
// while q is not empty  do --
    // we need to keep track of nno. of nodes in each levels
    // we can do that by size of queue
    // since we need to add list of elements after each level maintain a lLL for ech level and erases after each level
    List<Integer> =  new ArrayList();
    for( loop till size)
     do 
     1. pop the queue element
          TreeNode node = queue.remove()
     2. do some operation with it :: here we are adding to lists but can be anything like printing or anything
           tempList.add(t.val);
      3. add its left and right trees and Make sure to check left and right nodes are not null
      we dont want to insert to null values into queue
                if(t.left != null)
                    q.add(t.left);
                if(t.right != null)
                    q.add(t.right);
      commplete foor
    then add the list of level nodes to original node
      resultList.add(tempList); 

  4: Zig zag level order traversal
  ====================

  Same as level order and we use same alg
  except some flag and how to insert elements to Linked List
   we will leverage list.add(x) and list.add(0, x)
   and we decide that based on the flag and for every level we chnage the flag

        // same like  level order tree except we manipulate linked list on how to insert either append or insert at first position
        //leverage that and also we try to decide that at every level using a level flag so that based pon this we can decide where to insert , rest everything is same
        // Achieved using BFS -- QUEUE

// initailize the queue : use Linked list implementation of Queue Interface
        Queue<TreeNode> q = new LinkedList();
        boolean orderFlag = true; and also a flag

// initilize with root node initilly to queus as iniyial
// while q is not empty  do --
    // we need to keep track of nno. of nodes in each levels
    // we can do that by size of queue
    // since we need to add list of elements after each level maintain a lLL for ech level and erases after each level
    List<Integer> =  new ArrayList();
    for( loop till size)
     do 
     1. pop the queue element
          TreeNode node = queue.remove()
     2. do some operation with it :: here we are adding to lists but can be anything like printing or anything
         Tricky:: maniuplutae
                if(orderFlag)
                    tempList.add(t.val);
                else
                    tempList.add(0, t.val);

      3. add its left and right trees and Make sure to check left and right nodes are not null
      we dont want to insert to null values into queue
                if(t.left != null)
                    q.add(t.left);
                if(t.right != null)
                    q.add(t.right);
      commplete foor
    then add the list of level nodes to original node and chnage the flag at each level
      resultList.add(tempList); 
        orderFlag = orderFlag ? false :true;



    5: word LAdder problem:
    
==================

Use bfs and take that word in queue, and take that word and do generate permutation of that word and see if it is present in set, then add to queue

and process it accordingly
once the pushed node to queu shud be removed from set so that we dont visit multiple times
if we already found the polled node and check if it matches with end word then return result+1;
on every iteration  of while increase the result --since it is oprated at level by level


    // similar to bfs problem 
// 1. pop
// 2. oprate 

//    take th current string and convert to charArray
//    and try to find all possible versions of words with other al;phabetrs and check if that number is in set and if so , then add
//    mean while to brealk  if the string we find during q, has met endword then return result+1;

// // 3. push
//     // pus th found word and also remove that pushed word from set so that it avoids duplicates

//     for some reason standard queu strycture was not working for some test cases for loop===check on this

            
    // while(!q.isEmpty()){
            
    //     //level by level
    //     for(int i=q.size();i>0;i--){
    //         //int i =0; i<q.size(); i++
    //         //int i=q.size();i>0;i--
    //         // take the string


    Conclcusion:


// What is being asked

// start to end transformation in a minimum distance possible
// shortest path from start word to end word

// do we need return to minPath length or possible paths  
// Since we know that we need a path from one pt to other point and we need apath
// so we are searching some path--seqrching problem

// --bfs and dfs
// minimum shorthpath =  since i need a shortest path, how can i use bfs to find a shortest path
// bfs -- is great when we want to find shortest path length and not the path
// or if the pathh exists


// dfs - is great when we 
// 1. esier to implement --generic
// 2. and u r not looking for shortest path but when u want to find the path itself

// great when u recreate the paths


// Here bfs

// here use  try with bfs

// create a graph where start is starting node and use the nodes given in dict to use as intermediate hops and reach final word

// once u create a pth then u need to find the length of th path in shortest distance

// How to create that graph??

// func search(sta)rt, end,List<List<String>>

// findadjacent()


NumofIslands:
=============

        // logic is to traverse thru the grid like a regular matrix problm 
        // if u encounter 1 do:
        //  incremnet th islands as soon as u encounter the 1
        //  and visit all neighbours using bfs and turn them into 0/2 so that u dont visit again
        // visiting all neighbours --seems like a bfs/dfs graph problem so we can use dfs since w e might use recursion to travel the nodes
        // grid.length--rows count
        // grid[0].length --no of colummns


        mmake a recursive dfs for every node and mark the already visited node using  grid[i][j]='0';
            
             grid[i][j]='0';
        //visiting
        dfsAdj(grid, i+1, j);//up
        dfsAdj(grid, i-1, j);// down
        dfsAdj(grid, i, j+1);// right
        dfsAdj(grid, i, j-1);// left


  Course Schedule:
  =================

Discoverit is a Garph, with nodes and edge in DAG, Acyclic graph
One node has a dependcy on other 0->1
So we need to check whether we have a cyclic in it or not becos if deadlock --nosome courses might be left off

1. Build a graph using any datastructure representation of grph:: Adj  lists
2. Keep a Array to track we have a dependecy and also no depncy courses in an InDegree Array (Incident)
3.Traverse the graoh using bfs or dfs , we can use bfs--so queue
   1.pop 2. oprtate 3. push to queus as its neighbours and process them accordingly


1.         // Seems like a graph problem based on my instinct
        // in order to build a graph or represent we need some kind of adj list or some other form to represent
        // we ll take adj lists here , 
        
        // Adj list consists of numofcourses, and the list of courses that depends on this course
2. 
       // we ll try to miantian indegree as incidents in nodes
        //iterate thru prereq and fill the indegree 

3.      // now we have Indegree and Adj list
        // we ll go thru indegree array and check if there are any courses whose value is zero and well push that elements into queue in the first pass;
        // we need bfs-- so use Queue

        //pus elemnets initially using Indegree with 0 value init --meaning there are available to complete without any dependcy


       // now we ll sue traditional bfs::queue logic 
        // until q is empty, pop() ==>. operation ==> push


        while q-not emepty do:
        // we ll take this course and check in adjacency list if we have any neighbours
            // we llmaintain a counter, whenever we pop an element which means we completed the course
            //so we are. reaching near our target and atlast we compare our target and counter to see if we are able to complete all courses
            
            counter++;  // incr as soon as we pop elements


              // we ll take the neigbours if we have and reduce the neighbours,
                //since we completed the current course by removing from queue, that courses which depends on this course needs to be reduced and also check if they are 0 then they need to push,
                InDegree[neighbours]--;
                if(InDegree[neighbours] == 0)
                    // u need to push this into the queue
                    q.add(neighbours);


LOwest Common Ancestor:
==================
 //Diagram

 Recursiion:

 base case:
 Recursive eq for call on both left and right
 Analyze the results from stack calls
 return 

 1. if root == null return null
    if root is equal to one of the values
     return root
    if(root.val == p.val || root.val ==  q.val)
            return root;
  2.  //recursively search both nodes
        TreeNode lst = lowestCommonAncestor(root.left, p,q);
        TreeNode rst = lowestCommonAncestor(root.right, p,q);
  3. Handle results
     a) if nothing returns from left then result 
     b) if nothing returns from right then result left
     c) if noth of them returns soemthing then that is the lowestCommonAncestor
         return root
     d) if both of them returns null, u will return null and its been handled by above case
     

       if(lst == null) return rst;
        if(rst == null) return lst;// if one of thrm id null then return th othr node
        //if both of them are not null then we return root because that is lca
        return root;



  Diameter of Binary tree:
  =======================

  2 cases to handle 
  1. With node -- dimater can have --longest length passing thru root
  2. without root node -- longets length without passin thru node/root

  1. case
  for root node we  calculate the height of both nodes and add both heoights incliuding roots
   leftheight+ righthight+1;
  2. Without node:

  There might be diamtere at one left tree and shortest length at other tree withouyt including root
  in that case
  Math.max(leftdiamter, rightdiamter)


  So for every node we do not know whether it has large dimater with or without node 
  so we calculate both for every nodeand take the maximum out of it

  res = Math.max(leftheight+ righthight+1;, Math.max(leftdiamter, rightdiamter))

  // T: o(n) --since we optimized the solution to clauclate the height and dimater of a node at the same tme
// // this was calculating multiple time ...soo for every node it was calculating height and for 
// each node to calculate diamter , it also calculates height again even though it calculated already 
// //repetitive
// --optimized to calculate both at one go
// //recursive calls for every node but have constant time


  if(root == null){
         return new HD(0,0);  
       }
   
       HD lhd = heightDiameter( root.left);
       HD rhd = heightDiameter( root.right);
       
       // All this constant time
       int height = 1+ Math.max(lhd.h, rhd.h);
       int diameter = Math.max( lhd.h+ rhd.h, Math.max(lhd.d, rhd.d));
                                // with node.    without node
       // here with node calculate the height of left and right and max of it and adds 1 so we need not add one again
       //**** imp 

       return new HD(height, diameter);


  Flood fill
  ================

   // Visulaize like a graph so that u ll get some intuition
        // it is like from a given node reach out the nodes which has same color and chnage to new color
        // traverse from one node to all nodes in graph usig bfs/dfs and chnage  the image
        // since it is matrix we will use dfs to recursive calls to traverse up, down ,left and right
        //easy technique


      // Base cases: if src == new color then do nothing and return image
        if(image[sr][sc] == newColor)
            return image;

      / check the boundaries for the edge cases for indices
        //check also if the color that we are processing is not what we wanted::so dont touch them
        
        // TIP: Always always compare boundary index first then actual condition next otherwise u ll get array out of index exceptions in some cases
        if(sr <0 || sc < 0 || sr > image.length-1 || sc > image[0].length-1 || image[sr][sc] != initialcolor ) 
            return; // do nothing just return
        
        // chnage the color
        and call dfs( All way)

        image[sr][sc] = newColor;
        fill (image, sr+1,sc, initialcolor, newColor);
         fill (image, sr-1,sc, initialcolor, newColor);
         fill (image, sr,sc+1, initialcolor, newColor);
         fill (image, sr,sc-1, initialcolor, newColor);
        



  
