COins chnage min no of coins for a value:
===========================

        // here we can solve the problemm d[i] --is them min no of coins for denomination i dollars
        
        // d[amount+1] == o index based
         int dp[] = new int[amount +1];
         //initialled filled with 0, so we will make it maximum since asked min
        Arrays.fill(dp, amount+1);// fill it with some amount you want to have inintially
         which is more than denomi
        dp[0]=0;
        for(int i=0; i<= amount; i++){
            for(int j=0; j< coins.length; j++){
                
                // now we compare if coins[j] which is acurrent coin is <= amount. wecan take that coin
                // here we calculate dp[i], we take min of dp[i], 1+ optimal sol of(i-coins[j])
                if(coins[j] <= i){
                    dp[i] = Math.min(dp[i], 1+dp[i-coins[j]]);
                    
                }
            }
        }
        
        return dp[amount] > amount ? -1 : dp[amount];
        
    }


Longest palindrom substring:
========================

   // brute force take each letter and for each letter generate palindrome-o(n2)
      // then take the longest out of those--brute force--n3

      // 2 situations
      // aba and abba , one is. mid and other is non mid but both are palindromes/


      // instead of first and last ptr thing, we go to middle and traverse back left and right like we goto mid and expand latter.
      
      
// use expand from middle approach technique
 for evry letter in string do  both cases:

 --single loop

   for(int i=0; i< s.length(); i++){
          // check two cases mid and non mid for every charcater
          expandFromMiddle(s, i, i); //mid
          expandFromMiddle(s, i, i+1); // non mid
          
      }


expandFromMiddle--method checks if given mid index forms a palindrom , if so find the max length
and update the current max length oif its larger and palindrome start so that we have a track from wher this palindrom starts
// we can keep track of both

    //we ll maintain two instance variable one for longest length and longest strstrat
      int longestPalindromeLength=0;
      int longestPalindromeStartIndex;


      Update on every call made from above

      private void expandFromMiddle(String s, int left, int right){
      
      // check boundaries and also palindrome
      while(left >=0 && right < s.length() && s.charAt(left) == s.charAt(right)){
          left--; // <----- this direction
          right++; //----- > this way
      }
      
      if(longestPalindromeLength < right-left-1){
          longestPalindromeLength = right-left-1 ; // aba //here after loop l =-1 and r = 3 ==>3--1 -1 ==3 which is palindrom lenhth
          longestPalindromeStartIndex = left +1 ;  // since we reduced l-- in upper step and now we do increase one
          
      }


      then return substring



    Maxsubarray sum:
    ================

    Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.


    // Here  we maintain two variables  one
// is maxsubaarrySum and maxsumincluding current element
// here we ll take the maxsumcurrentelemnt only if we get good value with previous ones

// example 

// -2 1
// max current sum initally =-2 
// next max sum current = max(max current sum initally  + nums[i], nums[i])
//                      = max(-2+1, 1)

// and max sumarray will be iniyially -2 but as we prolong and traverse if, max sum current is greater than already sum , then we update the final max
// and return the final max


     int maxSubArray_Sum = nums[0]; 
        int maxSum_including_current = nums[0];
        
        // since we already processed 0 , start with 1 index
        for(int i=1; i< nums.length;i++){
            maxSum_including_current = Math.max(nums[i], nums[i] + maxSum_including_current);
            maxSubArray_Sum = Math.max(maxSubArray_Sum,maxSum_including_current );
            
        }
        
        return maxSubArray_Sum;



4: Best time to buy and sell to get max perofit
=======================

Input: [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
             Not 7-1 = 6, as selling price needs to be larger than buying price.
Example 2:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.


        // here we can check 2 cases for every price
        // maintain two variables minPrice and MaxProfit
        // do 2 things for every proce on every day
        // 1. if current price on that day which prices[i] is less than minPrice then buy it..meaning
        //     min= prices[i]
        // 2. if there is no minimum, then u could check if we sell this day could we get better profit
        //     maxProfit = Max(maxprofit, prices[i]-min)
        //                     i.e todays prices - min price that we could have bought
        //     and update maxprofit for each ietration, then max profit is the answer
                
        int maxProfit=0;
        int minPrice = Integer.MAX_VALUE;

         for(int i=0; i< prices.length;i++){
            if(prices[i] < minPrice){
                // buy it
                minPrice = prices[i];
            }else {
                //sell it if we get max profit , if we sell on that day
                maxProfit = Math.max(maxProfit, prices[i]-minPrice);
                    
            }
            
        }
        return maxProfit;