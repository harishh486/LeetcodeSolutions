Arrays:
char arr[] = arr.length
Arrays.fill(pattern, -1);
Arrays.asList(list);
int N = matrix.length;
 Arrays.sort(nums);
 
  ==>str to charArray conversion
   first convert str to charArray
   char [] ch = s.toCharArray();
   //iterate
   for (char c : t.toCharArray() )
  //convert back to string and make it as key
    String key = String.valueOf(ch);



//character count--use hash map


Strings:

String s = s ==null or s.length()
s.charAt(character)

s.substring(inclusive, exclusiveindex)


Character comparison:
==
s.charAt(i) == t.charAt(i)


Maps:
========

HashMap< inetegre, Integer> hm = new HashMap();
hmap.containsKey(target-nums[i])
hmpa.put(i,j)
hmap.get(i)

map.get(key).add(string)

Map <String, List> map = new HashMap<String, List>();


Sets:
========
Set< character> s = new HashSet();
Uniques
hashset.contains()
hashset.add(s.charAt(char))
hash.remove()

hash.size(()

Array list:
==========
new ArrayList(List of lists) -- gives list of lists

if List<List<String>> is return value
 u can also return new Arraylist() as anchor condition 

Sliding window:
=============

Hash set,
fix one rotate/move other one ptrs

while looping
maintain max
if element not found at hash set , put them ,calculate max and increment right++
if element found remove element and decrement left--


Coding:

 // check null cases first
 // Initialization of map,set , list or variables
 //return whatever its asking
 //logic with loops



 optimize:
 =======
 bottlenecks
 duplicates
 unnecessary work


 decrease time by using some auxillary space for repeted work

 

